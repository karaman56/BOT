import os
import requests
import time
import logging
import traceback
from dotenv import load_dotenv


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        requests.post(
            f"https://api.telegram.org/bot{os.environ['TELEGRAM_TOKEN']}/sendMessage",
            json={
                'chat_id': os.environ['TELEGRAM_CHAT_ID'],
                'text': f"ü§ñ –ë–æ—Ç: {message}",
                'parse_mode': 'Markdown'
            },
            timeout=5
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        send_telegram_notification("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        try:
            load_dotenv()
            telegram_token = os.environ['TELEGRAM_TOKEN']
            devman_token = os.environ['DEVMAN_TOKEN']
            chat_id = os.environ['TELEGRAM_CHAT_ID']
            logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        except KeyError as e:
            error_msg = f"–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e}"
            logger.error(error_msg)
            send_telegram_notification(error_msg)
            return

        last_timestamp = None

        while True:
            try:
                response = requests.get(
                    "https://dvmn.org/api/long_polling/",
                    headers={"Authorization": f"Token {devman_token}"},
                    params={"timestamp": last_timestamp} if last_timestamp else {},
                    timeout=90
                )
                response.raise_for_status()
                review_data = response.json()

                if review_data['status'] == 'found':
                    lesson = review_data['new_attempts'][0]
                    message = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã: {lesson['lesson_title']} - {'‚ùå –ù–µ—É–¥–∞—á–∞' if lesson['is_negative'] else '‚úÖ –£—Å–ø–µ—Ö'}"

                    requests.post(
                        f"https://api.telegram.org/bot{telegram_token}/sendMessage",
                        json={'chat_id': chat_id, 'text': message},
                        timeout=10
                    )

                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
                    last_timestamp = review_data['last_attempt_timestamp']
                else:
                    last_timestamp = review_data['timestamp_to_request']

            except requests.exceptions.ReadTimeout:
                logger.debug("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ - –ø–æ–≤—Ç–æ—Ä")
                continue

            except requests.exceptions.ConnectionError:
                error_msg = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
                logger.warning(error_msg)
                send_telegram_notification(error_msg)
                time.sleep(30)

            except Exception as e:
                error_traceback = traceback.format_exc()
                error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ:\n```\n{error_traceback}\n```"
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                send_telegram_notification(error_msg)
                time.sleep(30)

    except Exception as e:
        error_traceback = traceback.format_exc()
        error_msg = f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n```\n{error_traceback}\n```"

        logger.critical(error_msg)
        send_telegram_notification(error_msg)

        raise


if __name__ == '__main__':
    main()
